# app/dtos/chat_title_dto.py

from pydantic import BaseModel, Field, validator
from typing import Optional, List, Dict, Any
from datetime import datetime
from uuid import UUID


class ChatMessageContextDTO(BaseModel):
    """DTO for chat message context used in title generation."""
    role: str = Field(..., description="Message role: 'user' or 'assistant'")
    content: str = Field(..., description="Message content")
    timestamp: datetime = Field(..., description="Message timestamp")

    class Config:
        from_attributes = True


class TitleGenerationRequestDTO(BaseModel):
    """DTO for title generation request."""
    session_id: UUID = Field(..., description="Chat session UUID")
    user_id: int = Field(..., description="User ID requesting the title generation")
    force_regenerate: Optional[bool] = Field(False, description="Force regenerate even if title exists")

    class Config:
        from_attributes = True


class TitleGenerationResponseDTO(BaseModel):
    """DTO for title generation response."""
    success: bool = Field(..., description="Whether title generation was successful")
    title: Optional[str] = Field(None, description="Generated title (if successful)")
    message: str = Field(..., description="Response message")
    error: Optional[str] = Field(None, description="Error code (if failed)")
    
    # Additional metadata
    generation_time_ms: Optional[int] = Field(None, description="Time taken to generate title in milliseconds")
    context_messages_count: Optional[int] = Field(None, description="Number of messages used for context")

    class Config:
        from_attributes = True


class TitleReadinessCheckDTO(BaseModel):
    """DTO for checking title generation readiness."""
    session_id: UUID = Field(..., description="Chat session UUID")
    user_id: int = Field(..., description="User ID")

    class Config:
        from_attributes = True


class TitleReadinessResponseDTO(BaseModel):
    """DTO for title readiness response."""
    success: bool = Field(..., description="Whether check was successful")
    ready: Optional[bool] = Field(None, description="Whether session is ready for title generation")
    current_title: Optional[str] = Field(None, description="Current session title")
    message: str = Field(..., description="Response message")
    error: Optional[str] = Field(None, description="Error code (if failed)")
    
    # Additional metadata
    message_count: Optional[int] = Field(None, description="Current number of messages in session")
    min_required_messages: Optional[int] = Field(None, description="Minimum messages required for generation")

    class Config:
        from_attributes = True


class ChatTitleUpdateDTO(BaseModel):
    """DTO for updating chat title."""
    session_id: UUID = Field(..., description="Chat session UUID")
    title: str = Field(..., min_length=1, max_length=40, description="New title for the session")
    user_id: int = Field(..., description="User ID performing the update")

    @validator('title')
    def validate_title(cls, v):
        if not v or not v.strip():
            raise ValueError('Title cannot be empty')
        return v.strip()

    class Config:
        from_attributes = True


class ChatTitleStatsDTO(BaseModel):
    """DTO for chat title generation statistics."""
    total_titles_generated: int = Field(..., description="Total titles generated by the system")
    successful_generations: int = Field(..., description="Number of successful generations")
    failed_generations: int = Field(..., description="Number of failed generations")
    average_generation_time_ms: float = Field(..., description="Average generation time in milliseconds")
    most_common_themes: List[str] = Field(default=[], description="Most common themes in generated titles")

    class Config:
        from_attributes = True