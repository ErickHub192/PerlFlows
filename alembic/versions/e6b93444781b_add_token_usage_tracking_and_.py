"""Add token usage tracking and subscription limits

Revision ID: e6b93444781b
Revises: 94a9624fbb1e
Create Date: 2025-07-29 16:45:07.895141

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e6b93444781b'
down_revision: Union[str, None] = '94a9624fbb1e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_subscriptions',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('plan_type', sa.String(length=20), nullable=False),
    sa.Column('monthly_token_limit', sa.Integer(), nullable=False),
    sa.Column('tokens_used_current_month', sa.Integer(), nullable=False),
    sa.Column('billing_cycle_start', sa.Date(), nullable=False),
    sa.Column('next_reset_date', sa.Date(), nullable=False),
    sa.Column('alert_80_sent', sa.Boolean(), nullable=False),
    sa.Column('alert_90_sent', sa.Boolean(), nullable=False),
    sa.Column('limit_reached', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_table('user_token_usage',
    sa.Column('usage_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('workflow_id', sa.UUID(), nullable=True),
    sa.Column('execution_id', sa.UUID(), nullable=True),
    sa.Column('input_tokens', sa.Integer(), nullable=False),
    sa.Column('output_tokens', sa.Integer(), nullable=False),
    sa.Column('total_tokens', sa.Integer(), sa.Computed('input_tokens + output_tokens', ), nullable=False),
    sa.Column('input_cost', sa.DECIMAL(precision=10, scale=6), nullable=False),
    sa.Column('output_cost', sa.DECIMAL(precision=10, scale=6), nullable=False),
    sa.Column('total_cost', sa.DECIMAL(precision=10, scale=6), sa.Computed('input_cost + output_cost', ), nullable=False),
    sa.Column('model_used', sa.String(length=50), nullable=False),
    sa.Column('operation_type', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['execution_id'], ['flow_executions.execution_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['workflow_id'], ['flows.flow_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('usage_id')
    )
    with op.batch_alter_table('user_token_usage', schema=None) as batch_op:
        batch_op.create_index('idx_user_token_usage_user_month', ['user_id', 'created_at'], unique=False)
        batch_op.create_index('idx_user_token_usage_workflow', ['workflow_id', 'created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_token_usage_execution_id'), ['execution_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_token_usage_user_id'), ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_token_usage_workflow_id'), ['workflow_id'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_token_usage', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_token_usage_workflow_id'))
        batch_op.drop_index(batch_op.f('ix_user_token_usage_user_id'))
        batch_op.drop_index(batch_op.f('ix_user_token_usage_execution_id'))
        batch_op.drop_index('idx_user_token_usage_workflow')
        batch_op.drop_index('idx_user_token_usage_user_month')

    op.drop_table('user_token_usage')
    op.drop_table('user_subscriptions')
    # ### end Alembic commands ###
