{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(ls:*)",
      "Bash(python3 -m alembic:*)",
      "Bash(source:*)",
      "Bash(alembic current:*)",
      "Bash(./motorW/Scripts/python.exe main.py)",
      "Bash(./motorW/Scripts/alembic.exe stamp 20250611_create_refresh_tokens_table)",
      "Bash(./motorW/Scripts/alembic.exe stamp 61f3fa7a806b)",
      "Bash(mkdir:*)",
      "Bash(python3:*)",
      "Bash(rg:*)",
      "Bash(rm:*)",
      "Bash(dig:*)",
      "Bash(nslookup:*)",
      "Bash(telnet:*)",
      "WebFetch(domain:docs.n8n.io)",
      "Bash(alembic upgrade:*)",
      "Bash(motorW/Scripts/python.exe:*)",
      "Bash(./motorW/Scripts/python.exe -c \"import main; print('Main imports successfully')\")",
      "Bash(./motorW/Scripts/alembic.exe upgrade head)",
      "Bash(./motorW/Scripts/python.exe -m alembic upgrade head)",
      "Bash(./motorW/Scripts/python.exe -m alembic heads)",
      "Bash(./motorW/Scripts/python.exe -m alembic merge -m \"merge_page_templates\" page_templates actions_auth_policy_ref)",
      "Bash(npm run build:*)",
      "Bash(mv:*)",
      "Bash(curl:*)",
      "Bash(./motorW/Scripts/python.exe seed_google_triggers.py)",
      "Bash(/mnt/c/kyraProyecto/motorW/Scripts/python.exe -c \"\nimport os\nfrom sqlalchemy import create_engine, text\nDATABASE_URL = os.getenv('DATABASE_URL')\nengine = create_engine(DATABASE_URL)\nwith engine.connect() as conn:\n    result = conn.execute(text('SELECT column_name, is_nullable, column_default FROM information_schema.columns WHERE table_name = \\'actions\\' ORDER BY ordinal_position'))\n    print('Columnas en tabla actions:')\n    for row in result:\n        print(f'  - {row[0]} (nullable: {row[1]}, default: {row[2]})')\n\")",
      "Bash(/mnt/c/kyraProyecto/motorW/Scripts/python.exe -c \"\nimport os\nfrom dotenv import load_dotenv\nfrom sqlalchemy import create_engine, text\nload_dotenv()\nDATABASE_URL = os.getenv('DATABASE_URL')\nprint(f'Conectando a: {DATABASE_URL[:50]}...')\nengine = create_engine(DATABASE_URL)\nwith engine.connect() as conn:\n    result = conn.execute(text('SELECT column_name, is_nullable, column_default FROM information_schema.columns WHERE table_name = \\'actions\\' ORDER BY ordinal_position'))\n    print('Columnas en tabla actions:')\n    for row in result:\n        print(f'  - {row[0]} (nullable: {row[1]}, default: {row[2]})')\n\")",
      "Bash(/mnt/c/kyraProyecto/motorW/Scripts/python.exe seed_webhook_triggers_2025_final.py --insert-only)",
      "Bash(/mnt/c/kyraProyecto/motorW/Scripts/python.exe -c \"\nimport os\nfrom dotenv import load_dotenv\nfrom sqlalchemy import create_engine, text\nload_dotenv()\nDATABASE_URL = os.getenv('DATABASE_URL')\nengine = create_engine(DATABASE_URL)\nwith engine.connect() as conn:\n    result = conn.execute(text('SELECT column_name, is_nullable, column_default FROM information_schema.columns WHERE table_name = \\'parameters\\' ORDER BY ordinal_position'))\n    print('Columnas en tabla parameters:')\n    for row in result:\n        print(f'  - {row[0]} (nullable: {row[1]}, default: {row[2]})')\n\")",
      "Bash(/mnt/c/kyraProyecto/motorW/Scripts/python.exe -c \"\nimport os\nfrom dotenv import load_dotenv\nfrom sqlalchemy import create_engine, text\nload_dotenv()\nDATABASE_URL = os.getenv('DATABASE_URL')\nengine = create_engine(DATABASE_URL)\nwith engine.connect() as conn:\n    result = conn.execute(text('SELECT unnest(enum_range(NULL::param_type))'))\n    print('Valores permitidos para param_type:')\n    for row in result:\n        print(f'  - {row[0]}')\n\")",
      "Bash(/mnt/c/kyraProyecto/motorW/Scripts/python.exe seed_webhook_triggers_2025_corrected.py --insert-only)",
      "Bash(/mnt/c/kyraProyecto/motorW/Scripts/python.exe seed_webhook_triggers_2025_corrected.py --update-only)",
      "Bash(/mnt/c/kyraProyecto/motorW/Scripts/python.exe migrate_workflows_to_webhooks_2025.py --report-only)",
      "Bash(/mnt/c/kyraProyecto/motorW/Scripts/python.exe migrate_workflows_clean.py --report-only)",
      "Bash(/mnt/c/kyraProyecto/motorW/Scripts/python.exe -m alembic merge -m \"merge_heads\" f018fb42fb1b fix_service_id_nullable)",
      "Bash(ss:*)",
      "Bash(alembic revision:*)",
      "Bash(sed:*)",
      "Bash(./motorW/Scripts/python.exe test_integration.py)"
    ],
    "deny": []
  }
}